from pickle import dumps, loads
from puzzles import Puzzle24
from copy import deepcopy, copy
from queue import PriorityQueue
from heapq import heappop, heappush
import numpy as np
import threading

'''
h1 = the number of misplaced tiles. For Figure 3.28, 
all of the eight tiles are out of position, so the 
start state would have h1 = 8. h1 is an admissible 
heuristic because it is clear that any tile that is 
out of place must be moved at least once.
'''


def cpy(obj):
    t = Puzzle24.Puzzle(shuffle=False)
    t.puzzle = [*obj.puzzle]
    t._dist = (obj._dist)
    t._globalCost = (obj._globalCost)
    t._index = (obj._index)
    return t


q = PriorityQueue()
explored = {""}
cost = 0
y = Puzzle24.Puzzle()

h = []
a = heappush(h, y)
x = y

# [1,2,3,4,5,6,7,8,9,10,11,12,0,13,14,15]
# [2,7,1,13,14,5,15,10,11,3,0,4,12,9,6,8]
# [2, 1, 3, 4 ,5 ,6 ,7 ,8 ,9, 10, 11, 12, 13, 14, 15,0]
#[1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 11, 12, 9, 13, 14, 15]
#[1,2,3,4,5,6,7,8,9,10,11,17,12,14,15,21,13,18,0,19,22,16,23,24,20]
#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,13,14,15,21,19,22,16,23,17,24,20,0,18]
#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,13, 14, 15, 16, 23, 22, 24, 20, 21, 19, 0, 17, 18]
"""
[1, 2, 3, 4, 5, 6, 7, 8, 10, 0, 11, 12, 23, 9, 15, 16, 17, 14, 13, 24, 21, 22, 19, 20, 18]
[2, 3, 4, 0, 5, 1, 6, 8, 9, 10, 11, 7, 12, 14, 15, 16, 17, 13, 18, 24, 21, 22, 23, 20, 19]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 12, 14, 0, 21, 16, 19, 13, 15, 20, 22, 23, 18, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 22, 17, 19, 15, 20, 21, 18, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 23, 22, 20, 15, 21, 17, 19, 18, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 0, 21, 22, 23, 20, 19]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 13, 14, 15, 11, 16, 23, 18, 20, 21, 17, 22, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 23, 24, 15, 20, 21, 22, 18, 19]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 17, 23, 20, 24, 16, 21, 22, 19, 18]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 14, 18, 10, 16, 17, 13, 20, 15, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 11, 6, 8, 9, 15, 10, 7, 12, 14, 0, 16, 17, 13, 18, 20, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 14, 15, 16, 22, 19, 23, 24, 20, 12, 21, 18, 0]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 20, 15, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 17, 18, 20, 15, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 10, 16, 12, 14, 15, 17, 11, 23, 18, 20, 21, 13, 22, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 10, 0, 11, 12, 14, 9, 15, 16, 17, 13, 18, 20, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 0, 21, 22, 18, 24, 20]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 20, 15, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 14, 15, 16, 22, 12, 19, 20, 21, 18, 0, 23, 24]
[1, 2, 3, 4, 10, 5, 13, 7, 9, 0, 6, 11, 8, 14, 15, 16, 12, 17, 19, 20, 21, 22, 18, 23, 24]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24]
[1, 7, 2, 3, 5, 6, 14, 9, 4, 0, 11, 13, 8, 19, 10, 22, 12, 17, 20, 15, 16, 21, 18, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 0, 21, 22, 23, 20, 19]
[6, 1, 3, 4, 10, 5, 2, 8, 9, 0, 11, 14, 12, 18, 15, 16, 7, 17, 13, 20, 21, 22, 23, 19, 24]
[1, 3, 8, 4, 5, 6, 7, 2, 9, 10, 0, 17, 16, 18, 15, 11, 14, 12, 13, 24, 21, 22, 23, 20, 19]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 18, 0, 16, 17, 13, 20, 15, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 9, 18, 10, 11, 14, 8, 15, 19, 16, 12, 17, 24, 0, 21, 22, 13, 23, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 12, 13, 14, 0, 11, 16, 23, 18, 20, 21, 17, 22, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 8, 10, 20, 15, 17, 12, 9, 0, 11, 16, 14, 13, 24, 21, 22, 23, 18, 19]
[1, 2, 3, 5, 0, 6, 7, 9, 4, 10, 16, 13, 8, 14, 15, 12, 11, 17, 19, 24, 21, 22, 20, 23, 18]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 21, 16, 18, 24, 15, 20, 17, 22, 19, 23]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15, 21, 22, 23, 24, 20]
[1, 2, 3, 4, 5, 6, 7, 9, 0, 10, 11, 13, 8, 14, 15, 16, 12, 17, 20, 24, 21, 22, 18, 23, 19]
[1, 2, 3, 4, 10, 5, 6, 8, 9, 0, 11, 7, 12, 14, 15, 16, 17, 13, 18, 20, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 9, 13, 10, 11, 12, 8, 15, 20, 16, 17, 19, 14, 24, 21, 22, 18, 23, 0]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 12, 14, 15, 21, 16, 13, 18, 24, 20, 17, 22, 19, 0]
[1, 2, 3, 4, 5, 6, 7, 0, 14, 10, 11, 12, 9, 8, 15, 16, 17, 13, 19, 20, 21, 22, 18, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 21, 14, 0, 15, 11, 18, 13, 19, 20, 17, 16, 22, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 12, 14, 0, 21, 16, 13, 19, 15, 20, 22, 23, 24, 18]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 17, 18, 20, 11, 16, 14, 24, 0, 21, 22, 23, 12, 19]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 13, 20, 16, 12, 22, 15, 24, 21, 19, 17, 18, 23]
[1, 2, 3, 4, 10, 5, 11, 8, 9, 0, 7, 6, 13, 14, 15, 16, 12, 22, 19, 20, 21, 18, 17, 23, 24]
[1, 2, 4, 9, 5, 6, 8, 3, 10, 15, 11, 7, 12, 14, 20, 16, 17, 13, 18, 0, 21, 22, 23, 19, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 10, 16, 17, 18, 24, 15, 21, 22, 23, 20, 19]
[1, 2, 3, 5, 0, 6, 7, 9, 4, 10, 11, 12, 8, 13, 15, 16, 17, 19, 14, 20, 21, 22, 18, 23, 24]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 24, 21, 22, 23, 20, 19]
[1, 2, 3, 4, 5, 12, 6, 8, 9, 15, 0, 10, 13, 14, 20, 11, 7, 16, 18, 24, 21, 17, 23, 22, 19]
[1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 19, 23, 15, 21, 22, 18, 24, 20]

[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 13, 19, 17, 10, 16, 18, 14, 12, 15, 20, 21, 22, 23, 24]"""
if True:
    x.puzzle = [1, 2, 3, 4, 5, 12, 6, 8, 9, 15, 0, 10,
                13, 14, 20, 11, 7, 16, 18, 24, 21, 17, 23, 22, 19]







    x.distCheck()
    x.findIndex()

print(x.puzzle)
explored.add(str(x.puzzle))

while x._dist != 0 and cost < 20000000:
    """up = loads(dumps(x),fast=True)  # deepcopy(x)
    down = loads(dumps(x))  # deepcopy(x)
    left = loads(dumps(x))  # deepcopy(x)
    right = loads(dumps(x))  # deepcopy(x)"""

    up = cpy(x)
    down = cpy(x)
    left = cpy(x)
    right = cpy(x)

    x1 = up.up()
    x2 = down.down()
    x3 = left.left()
    x4 = right.right()

    if x1 and str(up.puzzle) not in explored:
        #q.put(up)
        heappush(h, up)
        explored.add(str(up.puzzle))
        up.parent_node = x
    else:
        del up

    if x2 and str(down.puzzle) not in explored:
        #q.put(down)
        heappush(h, down)
        explored.add(str(down.puzzle))
        down.parent_node = x
    else:
        del down

    if x3 and str(left.puzzle) not in explored:
        #q.put(left)
        heappush(h, left)
        explored.add(str(left.puzzle))
        left.parent_node = x
    else:
        del left

    if x4 and str(right.puzzle) not in explored:
        #q.put(right)
        heappush(h, right)
        explored.add(str(right.puzzle))
        right.parent_node = x
    else:
        del right

    del x

    x = heappop(h)
    x._globalCost += 1
    if(cost % 10000 == 0):
        print(cost)
        
    cost += 1


temp = x
lst = []
while temp.parent_node != None:
    lst.append(temp)
    temp = temp.parent_node

for i in lst:
    print(i)
    #print(i._index)
print(x._globalCost, " <> ", cost)
